import type { Element, Nodes } from 'hast'
import { findAndReplace } from 'hast-util-find-and-replace'
import { h, s } from 'hastscript'

export type PairKind = 'zh' | 'pinyin' | 'la' | 'en'
export type PairProps = [PairKind, string]

export const NAME_CLASSNAME = 'mlmd-name'
export const NAME_ITEM_CLASSNAME = 'mlmd-name-item'
export const NAME_REGEX = /{{name\s*\|([^}]+)}}/i
const NAME_PART_SEPARATOR = '|'

function isEven(n: number) {
  return n % 2 === 0
}

function chunk<T>(arr: T[], size: number) {
  return Array.from({ length: Math.ceil(arr.length / size) }, (_: T, i: number) =>
    arr.slice(i * size, i * size + size),
  )
}

const zhSvgIcon = s('svg', {
    xmlns: 'http://www.w3.org/2000/svg',
    width: 14,
    height: 14,
    fill: 'none',
    viewBox: '0 0 14 14',
  }, [
    s('rect', {
      width: '13',
      height: '13',
      x: '0.5',
      y: '0.5',
      fill: 'white',
      stroke: 'currentColor',
      rx: '0.5',
    }),
    s('path', {
      fill: 'currentColor',
      d: 'M6.512 3.668c0-.176.037-.296.112-.36.075-.064.2-.096.376-.096.165 0 .288.032.368.096.08.064.12.184.12.36v1.008h1.968c.197 0 .355.01.472.032a.47.47 0 0 1 .28.12c.07.064.115.155.136.272.027.117.04.272.04.464v2.424c0 .176-.01.323-.032.44a.466.466 0 0 1-.136.264.552.552 0 0 1-.28.136c-.117.027-.275.04-.472.04H7.488v1.648a.484.484 0 0 1-.104.328c-.07.085-.197.128-.384.128-.208 0-.341-.035-.4-.104-.059-.07-.088-.19-.088-.36v-1.64H4.584c-.192 0-.35-.013-.472-.04a.6.6 0 0 1-.28-.136.54.54 0 0 1-.128-.272 2.466 2.466 0 0 1-.032-.432V5.556c0-.181.01-.328.032-.44a.5.5 0 0 1 .128-.272.547.547 0 0 1 .28-.128c.123-.027.28-.04.472-.04h1.928V3.668Zm.976 1.96v2.288h1.704c.107 0 .17-.016.192-.048.021-.032.032-.11.032-.232V5.868c0-.101-.019-.165-.056-.192-.032-.032-.11-.048-.232-.048h-1.64Zm-2.664 0c-.08 0-.13.013-.152.04-.021.027-.032.093-.032.2v1.768c0 .128.01.208.032.24.027.027.085.04.176.04h1.664V5.628H4.824Z',
    }),
  ],
)

const pinyinSvgIcon = s('svg', {
    xmlns: 'http://www.w3.org/2000/svg',
    width: 14,
    height: 14,
    fill: 'none',
    viewBox: '0 0 14 14',
  }, [
    s('rect', {
      width: '13',
      height: '13',
      x: '0.5',
      y: '0.5',
      fill: 'white',
      stroke: 'currentColor',
      rx: '0.5',
    }),
    s('path', {
      fill: 'currentColor',
      d: 'M10.872 7.82c0 .16-.048.28-.144.36a.523.523 0 0 1-.344.112h-.472v2.144c0 .16-.04.285-.12.376-.08.09-.203.136-.368.136-.181 0-.307-.045-.376-.136a.606.606 0 0 1-.104-.376V8.292H7.76a4.275 4.275 0 0 1-.136.848 2.53 2.53 0 0 1-.704 1.224c-.165.165-.36.325-.584.48-.187.128-.352.17-.496.128-.139-.037-.245-.136-.32-.296-.133-.288-.05-.517.248-.688.15-.09.283-.187.4-.288.117-.096.216-.208.296-.336.085-.128.155-.277.208-.448.053-.176.09-.384.112-.624h-.52a.561.561 0 0 1-.368-.112c-.085-.08-.128-.2-.128-.36 0-.17.043-.29.128-.36a.561.561 0 0 1 .368-.112h.544V5.82H6.6c-.176 0-.312-.035-.408-.104-.09-.07-.136-.195-.136-.376 0-.176.045-.301.136-.376.096-.075.232-.112.408-.112h.464a7.207 7.207 0 0 0-.24-.368 3.118 3.118 0 0 0-.232-.328c-.107-.139-.165-.261-.176-.368-.005-.112.059-.23.192-.352.123-.107.248-.15.376-.128.133.021.253.101.36.24.123.155.23.307.32.456l.28.448c.048.08.088.152.12.216a.69.69 0 0 1 .064.184h.512c.155-.203.293-.4.416-.592.128-.192.25-.408.368-.648.181-.357.424-.448.728-.272.133.085.213.187.24.304.027.112-.005.256-.096.432-.07.128-.141.259-.216.392a5.193 5.193 0 0 1-.248.384h.32c.165 0 .288.037.368.112.08.075.12.2.12.376 0 .181-.04.307-.12.376-.08.07-.203.104-.368.104h-.24v1.528h.472c.139 0 .253.037.344.112.096.07.144.19.144.36ZM5.12 4.62h.392c.155 0 .275.048.36.144.085.09.128.203.128.336 0 .139-.043.25-.128.336a.487.487 0 0 1-.36.128H5.12v1.184a2.34 2.34 0 0 0 .12-.08 2.36 2.36 0 0 1 .12-.096.564.564 0 0 1 .4-.128c.15.005.267.077.352.216l-.008-.008c.096.144.123.27.08.376a.785.785 0 0 1-.248.312c-.144.09-.283.176-.416.256-.133.08-.267.155-.4.224v2.128c0 .293-.072.52-.216.68-.139.165-.376.248-.712.248-.107 0-.205-.008-.296-.024a4.229 4.229 0 0 1-.368-.088.537.537 0 0 1-.296-.232.438.438 0 0 1-.048-.368c.059-.17.141-.277.248-.32.112-.037.25-.03.416.024.043.01.08.019.112.024l.112.032c.048.01.077.008.088-.008.016-.01.024-.045.024-.104v-1.56c-.059.027-.12.05-.184.072a2.24 2.24 0 0 0-.176.056c-.219.07-.373.08-.464.032-.09-.053-.16-.155-.208-.304-.048-.17-.048-.301 0-.392.053-.09.176-.168.368-.232.208-.053.43-.13.664-.232V5.564h-.576c-.315 0-.472-.157-.472-.472 0-.15.037-.264.112-.344.08-.085.2-.128.36-.128h.576v-.968c0-.181.048-.301.144-.36a.616.616 0 0 1 .328-.088c.139 0 .25.032.336.096.085.064.128.181.128.352v.968Zm2.656 2.728h1.168V5.82H7.776v1.528Z',
    }),
  ],
)

const laSvgIcon = s('svg', {
    xmlns: 'http://www.w3.org/2000/svg',
    width: 14,
    height: 14,
    fill: 'none',
    viewBox: '0 0 14 14',
  }, [
    s('rect', {
      width: '13',
      height: '13',
      x: '0.5',
      y: '0.5',
      fill: 'white',
      stroke: 'currentColor',
      rx: '0.5',
    }),
    s('path', {
      fill: 'currentColor',
      d: 'M6.099 8.652c.106 0 .202.037.288.112.085.07.128.187.128.352 0 .17-.046.29-.136.36a.456.456 0 0 1-.28.104h-2.04a.533.533 0 0 1-.416-.168.586.586 0 0 1-.152-.408V4.332c0-.128.05-.227.152-.296a.603.603 0 0 1 .368-.112c.154 0 .28.037.376.112.096.07.144.168.144.296v4.32h1.568Zm1.754-1.168c.005.485.093.835.264 1.048.176.213.418.32.728.32.309 0 .536-.12.68-.36.144-.245.213-.579.208-1-.006-.432-.083-.773-.232-1.024a.751.751 0 0 0-.672-.4.832.832 0 0 0-.72.344c-.176.23-.262.587-.256 1.072Zm1.856 1.504c-.123.272-.275.459-.456.56a1.343 1.343 0 0 1-.664.152c-.262 0-.502-.05-.72-.152a1.52 1.52 0 0 1-.552-.424 2.097 2.097 0 0 1-.36-.696 3.208 3.208 0 0 1-.128-.944c0-.432.048-.795.144-1.088a2.1 2.1 0 0 1 .392-.712 1.38 1.38 0 0 1 .568-.384c.213-.08.434-.12.664-.12.256 0 .482.072.68.216.197.139.346.344.448.616v-.336c0-.085.04-.176.12-.272.085-.096.213-.144.384-.144.17.005.296.056.376.152.085.09.128.179.128.264v3.56a.438.438 0 0 1-.104.264c-.064.096-.2.147-.408.152a.678.678 0 0 1-.256-.04.489.489 0 0 1-.16-.104.397.397 0 0 1-.08-.136.628.628 0 0 1-.016-.136v-.248Z',
    }),
  ],
)

const enSvgIcon = s('svg', {
    xmlns: 'http://www.w3.org/2000/svg',
    width: 14,
    height: 14,
    fill: 'none',
    viewBox: '0 0 14 14',
  }, [
    s('rect', {
      width: '13',
      height: '13',
      x: '0.5',
      y: '0.5',
      fill: 'white',
      stroke: 'currentColor',
      rx: '0.5',
    }),
    s('path', {
      fill: 'currentColor',
      d: 'M4.601 8.684h1.936c.203 0 .347.032.432.096.085.064.128.181.128.352 0 .17-.043.288-.128.352s-.23.096-.432.096H4.073a.688.688 0 0 1-.376-.088c-.09-.064-.136-.181-.136-.352V4.444c0-.165.043-.28.128-.344.085-.064.213-.096.384-.096h2.472c.155 0 .27.035.344.104.08.064.123.179.128.344.005.165-.035.283-.12.352a.59.59 0 0 1-.36.096H4.601v1.352h1.856c.17 0 .293.037.368.112.075.07.112.184.112.344 0 .16-.037.275-.112.344-.075.064-.197.096-.368.096H4.601v1.536ZM10.545 7.1c0-.17-.01-.32-.032-.448a.794.794 0 0 0-.12-.328.487.487 0 0 0-.232-.192.995.995 0 0 0-.384-.064c-.128 0-.248.013-.36.04a.626.626 0 0 0-.28.152.757.757 0 0 0-.184.304 1.6 1.6 0 0 0-.064.496v2.264c0 .09-.048.168-.144.232a.563.563 0 0 1-.352.104.599.599 0 0 1-.36-.104c-.09-.07-.136-.147-.136-.232V5.596c0-.096.048-.176.144-.24a.66.66 0 0 1 .36-.096c.139 0 .253.032.344.096.096.064.144.144.144.24v.392c.048-.096.104-.192.168-.288.07-.096.15-.181.24-.256.096-.08.203-.144.32-.192.123-.048.261-.072.416-.072.23 0 .435.032.616.096.187.064.344.16.472.288.133.123.235.28.304.472.075.192.112.416.112.672v2.616c0 .096-.045.176-.136.24a.575.575 0 0 1-.352.096.65.65 0 0 1-.368-.096c-.09-.064-.136-.144-.136-.24V7.1Z',
    }),
  ],
)

function getIconByKind(kind: PairKind) {
  switch (kind) {
    case 'zh':
      return zhSvgIcon
    case 'pinyin':
      return pinyinSvgIcon
    case 'la':
      return laSvgIcon
    case 'en':
      return enSvgIcon
    default:
      return
  }
}

function buildChildren(pairs: PairProps[]) {
  return pairs.map(([kind, value]) => {
    const icon = getIconByKind(kind)

    if (icon) {
      return h('div', { class: NAME_ITEM_CLASSNAME }, [
        icon,
        h('span', value),
      ])
    }
  })
    .filter((el) => el !== undefined) as Element[]
}

function replace(_value: string, match: string): Element | false {
  const pairList = match.trim()
    .split(NAME_PART_SEPARATOR)
    .map((v) => v.trim())
    .filter((v) => v.length > 0)

  if (!isEven(pairList.length)) {
    return false
  }

  const pairs: PairProps[] = chunk(pairList, 2)
    .map(([k, v]) => ([k.toLowerCase() as PairKind, v]))

  const children = buildChildren(pairs)

  return h('div', { class: NAME_CLASSNAME }, children)
}

export function parseNames(tree: Nodes) {
  findAndReplace(tree, [NAME_REGEX, replace])
}
